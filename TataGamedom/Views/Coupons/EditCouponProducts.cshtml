@model TataGamedom.Models.ViewModels.Coupons.EditCouponProductsVM

@{
    ViewBag.Title = "EditCouponProducts";
}
@section Styles {
    <link href="~/Content/layoutStyle1.css" rel="stylesheet" />
    <link href="~/Content/bootstrap theme.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/Content/YiyierStyle.css">
}
<div class="container">
    <h1 class="main_heading">優惠券適用商品</h1>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="mb-3">
                @Html.LabelFor(model => model.CouponName, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.CouponName, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.CouponName, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3">
                @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "form-label col-md-2 visually-hidden" })
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @id = "endTime", @class = "form-control visually-hidden", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.EndTime)
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.AvailableProducts, htmlAttributes: new { @class = "form-label col-md-2" })
                <div class="chooseBlock">
                    @foreach (var product in Model.AvailableProducts)
                    {
                        bool isSelected = Model.SelectedProductIds.Contains(product.Id);
                        if (!isSelected)
                        {
                            <div>
                                <input type="checkbox" class="productCheckbox" name="SelectedProductIds" value="@product.Id">
                                <label>@product.Game.ChiName (@product.GamePlatformsCode.Name)</label>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.SelectedProductIds, htmlAttributes: new { @class = "form-label col-md-2" })
                <div class="chooseBlock">
                    @foreach (var productId in Model.SelectedProductIds)
                    {
                        var product = Model.AvailableProducts.FirstOrDefault(p => p.Id == productId);
                        if (product != null)
                        {
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" class="selectedProductCheckbox" name="SelectedProductIds" value="@product.Id" checked readonly> @product.Game.ChiName (@product.GamePlatformsCode.Name)
                                </label>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="mb-5">
                <div class="mb-3">
                    <div style="text-align: right;">
                        @Html.ActionLink("返回", "Index", null, new { @class = "btn btn-primary btnColor" })
                        <input type="submit" value="更新" class="btn btn-primary btnColor" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/zh-tw.min.js"></script>
    <script>
        var currentDate = moment();
        var endTime = moment(document.getElementById('endTime').value, 'YYYY/M/D A h:mm:ss');
        $(document).ready(function () {
            checkEndTime();

            function checkEndTime() {
                if (currentDate.isAfter(endTime)) {
                    disableFormFields();
                    hideSaveButton();
                } else {
                    enableFormFields();
                    showSaveButton();
                }
            }

            function disableFormFields() {
                var form = document.querySelector('form');
                var inputs = form.querySelectorAll('input[type="checkbox"]');

                inputs.forEach(function (input) {
                    input.disabled = true;
                });
            }

            function enableFormFields() {
                var form = document.querySelector('form');
                var inputs = form.querySelectorAll('input[type="checkbox"]');

                inputs.forEach(function (input) {
                    input.disabled = false;
                });
            }

            // 隱藏保存按鈕
            function hideSaveButton() {
                var saveButton = document.querySelector('input[type="submit"]');
                saveButton.classList.add('d-none');
            }

            // 顯示保存按鈕
            function showSaveButton() {
                var saveButton = document.querySelector('input[type="submit"]');
                saveButton.classList.remove('d-none');
            }
        });
    </script>
}