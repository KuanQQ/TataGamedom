@model TataGamedom.Models.ViewModels.Coupons.CouponEditVM

@{
    ViewBag.Title = "Edit";
}
@section Styles {
    <link href="~/Content/layoutStyle1.css" rel="stylesheet" />
    <link href="~/Content/bootstrap theme.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/Content/YiyierStyle.css">
}
<div class="container">
    <h1 class="main_heading">編輯優惠券</h1>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="mb-3">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control target" } })
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.DiscountTypeId, htmlAttributes: new { @class = "form-label col-md-1" })
                @foreach (var discountType in Model.DiscountTypeCode)
                {
                    <label class="radio-inline form-check-label">
                        <input type="radio" name="DiscountTypeId" value="@discountType.Id" id="discountType_@discountType.Id" @(discountType.Id == Model.DiscountTypeId ? "checked" : "")>
                        @discountType.Name
                    </label>
                }
                @Html.ValidationMessageFor(model => model.DiscountTypeId, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.Threshold, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.Threshold, new { htmlAttributes = new { @class = "form-control target" } })
                @Html.ValidationMessageFor(model => model.Threshold, "", new { @class = "text-danger" })
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control target", type = "date", id = "startTimeInput" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.StartTime)
            </div>
            <div class="mb-3">
                @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "form-label col-md-2" })
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control target", type = "date", id = "endTimeInput" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.EndTime)
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.ModifiedTime, htmlAttributes: new { @class = "form-label col-md-2" })
                <div>
                    @Html.DisplayFor(model => model.ModifiedTime, new { htmlAttributes = new { @class = "form-control target", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ModifiedTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="mb-3">
                @Html.LabelFor(model => model.ModifiedBackendMemberName, htmlAttributes: new { @class = "form-label col-md-2" })
                <div>
                    @Html.DisplayFor(model => model.ModifiedBackendMemberName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ModifiedBackendMemberName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="mb-5">
                <div class="mb-3">
                    <div style="text-align: right;">
                        @Html.ActionLink("返回", "Index", null, new { @class = "btn btn-primary btnColor" })
                        <input type="submit" value="更新" class="btn btn-primary btnColor" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // 获取开始时间输入框元素
        var startTimeInput = document.getElementById('startTimeInput');

        // 获取结束时间输入框元素
        var endTimeInput = document.getElementById('endTimeInput');

        // 获取保存按钮元素
        var saveButton = document.querySelector('input[type="submit"]');

        // 获取当前日期
        var currentDate = new Date().toISOString().split('T')[0];

        // 设置开始时间输入框的最小值为当前日期
        startTimeInput.min = currentDate;

        // 设置结束时间输入框的最小值为当前日期
        endTimeInput.min = currentDate;

        // 检查开始时间和结束时间的值
        function checkTimeInputs() {
            var selectedStartDate = startTimeInput.value;
            var selectedEndDate = endTimeInput.value;

            if (selectedEndDate < currentDate) {
                disableFormFields();
                hideSaveButton();
            } else if (selectedStartDate < currentDate) {
                disableStartTimeField();
                showSaveButton();
            } else {
                enableFormFields();
                showSaveButton();
            }
        }

        // 禁用表單中的所有欄位
        function disableFormFields() {
            var form = document.querySelector('form');
            var inputs = form.querySelectorAll('input, select, textarea');

            inputs.forEach(function (input) {
                input.disabled = true;
            });
        }

        // 禁用开始时间欄位
        function disableStartTimeField() {
            startTimeInput.disabled = true;
        }

        // 啟用表單中的所有欄位
        function enableFormFields() {
            var form = document.querySelector('form');
            var inputs = form.querySelectorAll('input, select, textarea');

            inputs.forEach(function (input) {
                input.disabled = false;
            });
        }

        // 隱藏保存按鈕
        function hideSaveButton() {
            saveButton.classList.add('d-none');
        }

        // 顯示保存按鈕
        function showSaveButton() {
            saveButton.classList.remove('d-none');
        }

        // 初始化時檢查一次
        checkTimeInputs();

        // 監聽開始時間輸入框的值變化事件
        startTimeInput.addEventListener('change', function () {
            checkTimeInputs();
        });

        // 監聽結束時間輸入框的值變化事件
        endTimeInput.addEventListener('change', function () {
            checkTimeInputs();
        });
    </script>
}
